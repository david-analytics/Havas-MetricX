# -*- coding: utf-8 -*-
"""HavaMetriX.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aHsw1Eu83WwcZPTcqav_9HDb6haEqFWb
"""

#!pip install streamlit

# influencer_engagement_calculator.py

import streamlit as st

# Function to calculate engagement rate
def calculate_engagement_rate(followers, likes):
    try:
        # Calculate average likes if multiple posts are provided
        avg_likes = sum(likes) / len(likes)
        # Calculate engagement rate as percentage
        engagement_rate = (avg_likes / followers) * 100
        return round(engagement_rate, 2)
    except ZeroDivisionError:
        return 0
    except Exception as e:
        return f"Error: {str(e)}"

# Streamlit app
def main():
    # Set page title and header
    st.set_page_config(page_title="Havas MetricX - Engagement Calculator")
    st.title("Welcome to Havas MetricX")
    st.write("Calculate influencer engagement rate based on followers and likes from 10 posts")

    # Input for number of followers
    followers = st.number_input("Enter number of followers",
                              min_value=1,
                              value=1000,
                              step=1)

    # Input for likes from 10 posts
    st.subheader("Enter likes for 10 posts")
    likes = []
    cols = st.columns(5)  # Create 5 columns for better layout

    # Create 10 input fields for likes (2 rows of 5)
    for i in range(10):
        with cols[i % 5]:
            like = st.number_input(f"Post {i+1}",
                                 min_value=0,
                                 value=0,
                                 step=1,
                                 key=f"like_{i}")
            likes.append(like)

    # Calculate button
    if st.button("Calculate Engagement Rate"):
        if followers <= 0:
            st.error("Number of followers must be greater than 0")
        elif sum(likes) == 0:
            st.error("Please enter at least one like value")
        else:
            result = calculate_engagement_rate(followers, likes)
            st.success(f"Engagement Rate: {result}%")

            # Provide interpretation
            st.write("Engagement Rate Interpretation:")
            if result < 1:
                st.write("Below 1%: Low engagement")
            elif 1 <= result < 3:
                st.write("1-3%: Average engagement")
            elif 3 <= result < 6:
                st.write("3-6%: High engagement")
            else:
                st.write("Above 6%: Very high engagement")

    # Add some instructions
    with st.expander("How to use this calculator"):
        st.write("""
        1. Enter the influencer's total number of followers
        2. Input the number of likes for 10 recent posts
        3. Click 'Calculate Engagement Rate'
        4. The result shows the engagement rate as a percentage
        Note: This calculator uses the formula: (Average Likes / Followers) Ã— 100
        """)

if __name__ == "__main__":
    main()



